<!--TO READ THIS HELP FILE, RIGHT-CLICK ON THE FILE NAME IN THE
    SOLUTION EXPLORER PANE AND SELECT "VIEW IN BROWSER"-->

<html><head><title>SOAPState Sample: Uses ATL Server to Implement Persistent SOAP Servers</title></head><body><h1>SOAPState Sample: Uses ATL Server to Implement Persistent SOAP Servers</h1><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p /><p>Demonstrates how to implement a persistent SOAP server.</p><p>The SOAPState sample shows how to use the following:  </p><ul><li><p><b>IServiceProvider</b> interface implemented by <b>CIsapiExtension</b></p></li><li><p>SOAP headers</p></li></ul><p>The sample shows a method of loading the state of a SOAP server before a method invocation and of saving the state immediately after the invocation. The state of the SOAP server is preserved in memory. The code can be easily modified to store the state in a database or a file. A specific service is implemented in the <b>CIsapiExtension</b>-based class of the ISAPI DLL project to allow serialization of the SOAP servers.</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Security Note </th></tr><tr><td><p>This sample code is provided to illustrate a concept and should not be used in applications or Web sites, as it may not illustrate the safest coding practices.</p></td></tr></table></div><h1 class="heading">Requirements</h1><div id="requirementsSection" class="section"><ul><li><p>IIS</p></li></ul></div><h1 class="heading">Building and Running the Sample</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><h4 class="subHeading">To build and run this sample</h4><div class="subSection"><ol><li><p>Open the solution file, SoapState.sln, in the Visual Studio development environment.</p></li><li><p>Build the solution. </p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Note </th></tr><tr><td><p>This will build SStateIsapi.dll, an ISAPI extension containing the ISOAPSrvStorageService, and SState.dll, an example of a persistent SOAP server using the ISOAPSrvStorageService. It will also build demoApp.exe, a small client application showing how to access a persistent SOAP server.</p></td></tr></table></div></li><li><p>Run the console application demoApp.exe. You will see a series of output messages relating the communication with the server.</p></li></ol></div><p>If you map the virtual folder under a different name or on a different computer, you will need either to regenerate the demoApp proxy file (simpleSoapApProxy.h) or add the following to the demoApp.cpp file, before executing any SOAP invocation:</p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><td colspan="2"><pre>srv.SetUrl(
   "http://&lt; machine_name&gt;/&lt;folder_name&gt;/SState.dll?Handler=Default");</pre></td></tr></table></span></div></div><h1 class="heading">How the Sample Works</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"><p>Each persistent SOAP server has to implement a specific interface. This interface (<code>IPersistSoapServer</code>) contains two sets of methods. (Implementation of these methods should not be different from the implementation provided with the sample.) </p><sections ><h4 class="subHeading" xmlns="">Methods Exposed Through SOAP</h4><div class="subSection" xmlns=""><p>The first set of methods is exposed through SOAP:</p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><td colspan="2"><pre>[id(1)]HRESULT initPersistSoapServer([in]BSTR bstrUser, [in]BSTR bstrPwd, [out, retval]eState* state);
[id(2)]HRESULT destroyPersistSoapServer([in]BSTR bstrUser, [in]BSTR bstrPwd);
[id(3)]HRESULT setPersistSoapServerTimeout([in]DWORD dwTimeoutSecs);</pre></td></tr></table></span></div><p>Only the first method, <code>initPersistSoapServer</code>, must be implemented and called to have persistence. If the client application does not call <code>destroyPersistSoapServer</code>, the persistent object will be destroyed at timeout. If the client application does not call <code>setPersistSoapServerTimeout</code>, a default timeout value will be assigned.</p><p>The <code>initPersistSoapServer</code> method generates a unique value for a SOAP header defined as:</p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><td colspan="2"><pre>[soap_header(value="m_bstrStorageKey")]</pre></td></tr></table></span></div><p>It takes the default parameters, <code>in="true"</code> and <code>out="true"</code>, that will be applied to each SOAP method, so it will be sent both ways in each method invocation. Whenever a client application will invoke a SOAP method, the <code>m_bstrStorageKey</code> header will be part of the invocation. If, during the lifetime of one persistent SOAP server, two client applications use the same <code>bstrUser</code> and <code>bstrPwd</code> parameters for the <code>initPersistentSoapServer</code> method, the two applications will be connected to the same instance of the persistent object. If the parameters are different, different instances are created on the server side. If one client application invokes the initialization method with NULL as <code>bstrUser</code> and <code>bstrPwd</code>, then the persistent object created cannot be identified by the other application. It will be accessible only for the client that created it.</p><p>Once a SOAP invocation occurs, the following should appear in any SOAP method to ensure the persistent state is loaded:</p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><td colspan="2"><pre>CPersistentHandler persistHandler(static_cast&lt;IPersistSoapServer*&gt;(this), m_spServiceProvider);</pre></td></tr></table></span></div><p>The <code>CPersistentHandler</code> object resides on the stack, so it will be destroyed when the method ends. On destruction, it will take care of saving the state of the server.</p></div><h4 class="subHeading" xmlns="">Methods Not Exposed Through SOAP</h4><div class="subSection" xmlns=""><p>In the constructor/destructor of the <code>CPersistentHandler</code> object, the second set of methods in <code>IPersistSoapServer</code>, not exposed through SOAP, are used:</p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><td colspan="2"><pre>HRESULT getObjToken(storageKey&amp; token);
HRESULT setObjToken(storageKey&amp; token);
HRESULT persist_load(const ATLSOAP_BLOB &amp;data);
HRESULT persist_dump(ATLSOAP_BLOB &amp;data);</pre></td></tr></table></span></div><ul><li><p><code>getObjToken</code> is called while attempting to restore the state of the object, and it is supposed to return the value of the <code>m_bstrStorageKey</code> header to act as a storage key for the state of this server.</p></li><li><p><code>persist_load</code> is also called while attempting to restore the state of the object, to load the state of the server from the saved binary BLOB.</p></li><li><p><code>persist_dump</code> is called while attempting to save the state of the object, to serialize the object in the provided binary BLOB.</p></li><li><p><code>setObjToken</code> is called only during <code>initPersistSoapServer</code>, to set the value of the <code>m_bstrStorageKey</code> for the communication.</p></li></ul><p>Internally, the <code>CPersistentHandler</code> object connects to <code>ISOAPSrvStorageService</code> (defined in the persist.h file of the sample) provided by the ISAPI extension and simply sends binary BLOBs for storage under a specific key or retrieves the BLOBs based on the same key.</p><p>Although this sample stores the BLOBs in memory by modifying the implementation of <code>ISOAPSrvStorageService</code>, the SOAP server state can also be preserved in a database or a file.</p></div><h4 class="subHeading" xmlns="">Demonstrates</h4><div class="subSection" xmlns=""><p><MSHelp:link keywords="16E00F85-58FE-47E4-81A0-EDEF0870FCCC" tabindex="0" >CIsapiExtension::QueryService</MSHelp:link> | <MSHelp:link keywords="55A43106-9A49-474C-B19E-21FBDBB9A7B1" tabindex="0" >soap_header</MSHelp:link> | <MSHelp:link keywords="27E0776C-EE10-4D58-860A-9A37BB3D7F30" tabindex="0" >soap_method</MSHelp:link></p></div></sections></div></div><div id="footer"><div class="footerLine"></div>
          © Microsoft Corporation. All rights reserved.  Send <a href="mailto:DevDocs@microsoft.com?subject=Documentation Feedback :SOAPState Sample: Uses ATL Server to Implement Persistent SOAP Servers">comments</a> about this topic to Microsoft.
      </div></div></body></html>
