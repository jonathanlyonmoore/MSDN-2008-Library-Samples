<!--TO READ THIS HELP FILE, RIGHT-CLICK ON THE FILE NAME IN THE
    SOLUTION EXPLORER PANE AND SELECT "VIEW IN BROWSER"-->

<html><head><title>PooledAsync Sample: Increases Performance with an Additional Thread Pool</title></head><body><h1>PooledAsync Sample: Increases Performance with an Additional Thread Pool</h1><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p /><p>Demonstrates how to increase Web application and SOAP service availability and performance with an additional thread pool.</p><p>The PooledAsync sample contains two closely related samples demonstrating how to increase Web application and SOAP service availability and performance by incorporating an additional thread pool.</p><p>Be default, the ATL Server framework provides very high performance by using a thread pool in the ISAPI Extension to handle incoming requests. If any of these requests takes a long time to complete, however, the possibility arises that the application or service will become unresponsive to additional requests. This situation may occur when a high percentage of the threads in the primary pool (in the ISAPI Extension) are busy with long-running tasks (validating credit cards, calling another SOAP server, and so on). </p><p>The solution demonstrated in this sample is to implement an additional thread pool and use ATL Server's asynchronous features to offload these long-running tasks.</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Security Note </th></tr><tr><td><p>This sample code is provided to illustrate a concept and should not be used in applications or Web sites, as it may not illustrate the safest coding practices.</p></td></tr></table></div><h1 class="heading">Building and Running the Sample</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><h4 class="subHeading">To build and run this sample</h4><div class="subSection"><ol><li><p>Open the solution file, PooledAsync.sln, in the Visual Studio development environment.</p></li><li><p>Build the solution. This will also deploy the solution to the local Web server.</p></li><li><p>Use a Web browser to view http://localhost/pooledasync/index.htm. Use the links on the page to test the different ways that the Web application DLL provides for returning data to the client.</p></li><li><p>Open a command prompt in the folder that holds the SOAP client application, PooledAsyncSoapClient.exe, and run the application to test the ways that the XML Web service DLL provides for returning data to the client.</p></li></ol></div><sections ><h4 class="subHeading" xmlns="">Demonstrates</h4><div class="subSection" xmlns=""><p><MSHelp:link keywords="45CB42F2-091C-4E30-8959-2C23F6428FD8" tabindex="0" >AtlServerRequest::dwRequestState</MSHelp:link> | <MSHelp:link keywords="5E2FE028-8E6D-4686-93DF-1433D2080EC3" tabindex="0" >CAtlMap</MSHelp:link> | <MSHelp:link keywords="44E1EDD2-90BE-4BFE-9739-58E8B419E7D1" tabindex="0" >CComCriticalSection</MSHelp:link> | <MSHelp:link keywords="41F71602-7C49-4947-BF88-6E0CFB06955B" tabindex="0" >CHttpResponse::AsyncPrep</MSHelp:link> | <MSHelp:link keywords="2E4D3A62-E192-4107-A2B7-6D03DFA2E11D" tabindex="0" >CIsapiExtension</MSHelp:link> | <MSHelp:link keywords="A2584490-1318-47DF-AFFA-21E7F0CE33E7" tabindex="0" >CSoapHandler::SoapFault</MSHelp:link> | <MSHelp:link keywords="EF6533D5-4DB4-42A2-B48C-BA07423CF6DF" tabindex="0" >CSoapSocketClientT</MSHelp:link> | <MSHelp:link keywords="DF52D3F3-4583-4B0D-B0D0-32C0B60F0CDA" tabindex="0" >CStreamOnServerContext</MSHelp:link> | <MSHelp:link keywords="06683718-01B9-413C-9481-2DC1734EC70F" tabindex="0" >CThreadPool</MSHelp:link> | <MSHelp:link keywords="78EEEB4F-8ECB-46A9-8D65-832EBE2E9379" tabindex="0" >CThreadPool::Initialize</MSHelp:link> | <MSHelp:link keywords="962B28F8-24FD-4A43-B5AC-DF0D8C2DD858" tabindex="0" >CThreadPool::QueryInterface</MSHelp:link> | <MSHelp:link keywords="F665017A-20A5-4D83-817E-6119CE6B1727" tabindex="0" >CThreadPool::QueueRequest</MSHelp:link> | <MSHelp:link keywords="C955F747-E6E6-4865-A9BB-11A89F4DE57B" tabindex="0" >CThreadPool::Shutdown</MSHelp:link> | <MSHelp:link keywords="F9050D09-0319-4692-9E99-03BD0F894ABF" tabindex="0" >DECLARE_ASYNC_HANDLER</MSHelp:link> | <MSHelp:link keywords="E0328187-B195-4B97-BD4C-42CD3ADA98AE" tabindex="0" >HTTP_SUCCESS_ASYNC</MSHelp:link> | <MSHelp:link keywords="E0328187-B195-4B97-BD4C-42CD3ADA98AE" tabindex="0" >HTTP_SUCCESS_ASYNC_DONE</MSHelp:link> | <MSHelp:link keywords="834145CD-09D3-4149-BC99-620E1871CBFB" tabindex="0" >Worker Archetype</MSHelp:link> | <MSHelp:link keywords="F5D1DE03-B034-4D54-898F-CBDEDD68E04D" tabindex="0" >WorkerArchetype::Execute</MSHelp:link> | <MSHelp:link keywords="5D82463F-DBA9-461C-BC8D-692FF15ED17E" tabindex="0" >WorkerArchetype::Initialize</MSHelp:link> | <MSHelp:link keywords="9BB841F2-FED6-4808-A2AF-440B25EC91DB" tabindex="0" >WorkerArchetype::Terminate</MSHelp:link></p></div></sections></div></div><div id="footer"><div class="footerLine"></div>
          © Microsoft Corporation. All rights reserved.  Send <a href="mailto:DevDocs@microsoft.com?subject=Documentation Feedback :PooledAsync Sample: Increases Performance with an Additional Thread Pool">comments</a> about this topic to Microsoft.
      </div></div></body></html>
