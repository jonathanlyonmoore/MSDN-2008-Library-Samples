<!--TO READ THIS HELP FILE, RIGHT-CLICK ON THE FILE NAME IN THE
    SOLUTION EXPLORER PANE AND SELECT "VIEW IN BROWSER"-->

<html><head><title>PerformancePersist Sample: Provides Custom Performance Monitoring Data</title></head><body><h1>PerformancePersist Sample: Provides Custom Performance Monitoring Data</h1><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p /><p>Demonstrates how to expose performance information from an ATL Server Web application without losing that data when IIS is stopped and restarted.</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Security Note </th></tr><tr><td><p>This sample code is provided to illustrate a concept and should not be used in applications or Web sites, as it may not illustrate the safest coding practices.</p></td></tr></table></div><h1 class="heading">Requirements</h1><div id="requirementsSection" class="section"><ul><li><p>IIS</p></li></ul></div><h1 class="heading">Building and Running the Sample</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><h4 class="subHeading">To build and run this sample</h4><div class="subSection"><ol><li><p>Open the solution file, PerfPersist.sln, in the Visual Studio development environment.</p></li><li><p>From the <b>Build</b> menu, click <b>Build Solution</b>.</p></li><li><p>Register PerfServ by running the following command from the command line while in the directory with PerfServ's build output: </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><td colspan="2"><pre>PerfServ /Service</pre></td></tr></table></span></div></li><li><p>Start PerfServ by running the following command from the command line: </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><td colspan="2"><pre>net start PerfServ</pre></td></tr></table></span></div></li><li><p>Register the performance monitor data in the application DLL by running the following from the virtual directory created in step 2: </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><td colspan="2"><pre>regsvr32 PerfPersist.dll</pre></td></tr></table></span></div><p>This directory will probably be C:\inetpub\wwwroot\PerfPersist\bin, but may be different if the IIS root is different </p></li><li><p>From the <b>Debug</b> menu, click <b>Start Without Debugging</b>.</p></li><li><p>Run the Windows Performance Monitor and add counters for the object "Fibonacci Stats." These are the counters that are provided by the sample ATL Server application.</p></li><li><p>Submit a few requests and verify that the data is changing in the performance monitor.</p></li><li><p>Run the following command from the command line to unload the application DLL: </p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><td colspan="2"><pre>iisreset</pre></td></tr></table></span></div><p>No performance monitoring data should be lost even though the application providing the data is no longer running. The service PerfServ is keeping this data persistent in shared memory. When the ATL Server application is started again by navigating to the original page, it will reattach to the same shared memory and continue where it left off. </p></li></ol></div></div><h1 class="heading">How the Sample Persists the Performance Data</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"><p>ATL Server request handlers are created for each request and their DLL is only loaded as long as it is needed. If an ATL Server application wants to provide custom performance data using the performance monitoring subsystem, this data must be persisted between request handler invocations. This sample shows two methods for persisting the data:  </p><ul><li><p>Use a COM object to maintain a global instance of a <MSHelp:link keywords="FD0EC076-A5F5-4AC6-B223-E0E29313D2BF" tabindex="0" >CPerfMon</MSHelp:link>-derived object that manages custom performance counters.  </p><p>The COM object is maintained by the ATL Server ISAPI DLL, which is loaded persistently by IIS. When a request handler starts, it requests this service from the ISAPI extension, and gets the <MSHelp:link keywords="FD0EC076-A5F5-4AC6-B223-E0E29313D2BF" tabindex="0" >CPerfMon</MSHelp:link> object from the service. Alternately, this service could be added directly to a custom ISAPI DLL, but the method used by this sample does not require modification of the wizard-generated ISAPI DLL and is thus suitable for an environment with one generic ISAPI DLL servicing several application DLLs. </p></li><li><p>Use an external service process to maintain performance data.  </p><p>The service process executable file exposes the <b>IPerfCache</b> interface, which the application DLL uses when it creates its <MSHelp:link keywords="FD0EC076-A5F5-4AC6-B223-E0E29313D2BF" tabindex="0" >CPerfMon</MSHelp:link>-derived object. This ensures that if IIS is stopped or restarted for any reason that the performance data will not be lost even though the ISAPI DLL is no longer maintaining it. </p></li></ul><sections ><h4 class="subHeading" xmlns="">Demonstrates</h4><div class="subSection" xmlns=""><p><MSHelp:link keywords="910040F6-0CCF-4E02-B13B-F40AC1E1AD06" tabindex="0" >perfmon</MSHelp:link> | <MSHelp:link keywords="99936D73-39A3-47F3-91F4-69B16D0A92A0" tabindex="0" >perf_object</MSHelp:link> | <MSHelp:link keywords="B522B167-7EBC-475D-814F-EDABCE545F09" tabindex="0" >perf_counter</MSHelp:link> | <MSHelp:link keywords="FD0EC076-A5F5-4AC6-B223-E0E29313D2BF" tabindex="0" >CPerfMon</MSHelp:link> | <MSHelp:link keywords="6D4365ED-E31A-4755-8E88-E7356A28DB05" tabindex="0" >CPerfMon::CreateInstance</MSHelp:link> | <MSHelp:link keywords="474334F2-A03A-4579-965A-680202B33CB5" tabindex="0" >IIsapiExtension::AddService</MSHelp:link> | <MSHelp:link keywords="_inet_IServiceProvider_Interface_cpp" tabindex="0" >IServiceProvider</MSHelp:link></p></div></sections></div></div><div id="footer"><div class="footerLine"></div>
          © Microsoft Corporation. All rights reserved.  Send <a href="mailto:DevDocs@microsoft.com?subject=Documentation Feedback :PerformancePersist Sample: Provides Custom Performance Monitoring Data">comments</a> about this topic to Microsoft.
      </div></div></body></html>
