<!--TO READ THIS HELP FILE, RIGHT-CLICK ON THE FILE NAME IN THE
    SOLUTION EXPLORER PANE AND SELECT "VIEW IN BROWSER"-->

<html><head><title>ATLTangram Attributes Sample: Demonstrates Managing Large Projects That Use ATL, MFC, and COM</title></head><body><h1>ATLTangram Attributes Sample: Demonstrates Managing Large Projects That Use ATL, MFC, and COM</h1><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p /><p>ATLTangram is a port of the Tangram example found in the last chapter of Dale Rogerson's <i>Inside COM</i> (http://mspress.microsoft.com). Many thanks to Dale for doing all the hard work and allowing us to use the code in an ATL sample. This sample will help you convert a legacy COM application to one that uses ATL for its infrastructure.</p><p>ATLTangram is a large project consisting of the ATLTangram solution, which is the master controller for six subprojects: MFCTangram, ATLModel, ATLGdiWorld, ATLGLWorld, ATLModelExe, and ATLTangramCanvas. The sample demonstrates several features of the integrated development environment (IDE) and several COM concepts. The sample also demonstrates using MFC as the client of ATL COM servers.</p><p>The <MSHelp:link keywords="BD3B518C-CE5D-4B23-BD9B-3B58C43B802B" tabindex="0" >ATLTangram sample</MSHelp:link> is the nonattributed version of this sample.</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Security Note </th></tr><tr><td><p>This sample code is provided to illustrate a concept and should not be used in applications or Web sites, as it may not illustrate the safest coding practices.</p></td></tr></table></div><h1 class="heading">Building and Running the Sample</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><h4 class="subHeading">To build and run this sample</h4><div class="subSection"><ol><li><p>Open the solution file atltangram.sln.</p></li><li><p>From the <b>Build</b> menu, click <b>Build Solution</b>.</p></li><li><p>From the <b>Debug</b> menu, click <b>Start Without Debugging</b>.</p></li><li><p>A dialog box will appear: select either option. The Tangram program will begin.</p></li></ol></div></div><h1 class="heading">Managing a Large Project</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"><p>The solution has established the interdependencies in the IDE. These interdependencies work with the default directory structure for the sample and are path-relative. </p><p>The dependency hierarchy looks roughly like this:</p><div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><td colspan="2"><pre>MFCTangram
   ATLGLWorld
      ATLGdiWorld
         ATLTangramCanvas
            ATLModel
   ATLModelExe
      ATLModel
      ATLModel</pre></td></tr></table></span></div><p>All of the project settings are already established for the sample. Follow these steps to examine the project interdependencies.  </p><ol><li><p>From the <b>Project</b> menu, click <b>Properties</b>.</p></li><li><p>Select the Atltangram solution in Solution Explorer.</p></li><li><p>In the <b>Property Pages</b> dialog box, expand the <b>Common Properties</b> folder and select <b>Debug Source Files</b>. Examine the <b>Search these paths for source files</b> box.</p></li><li><p>Click <b>Project Dependencies</b> and examine the dependent project names.</p></li></ol><p>The ATLModel and ATLModelExe projects demonstrate how to set up a COM server so you can build it as either an in-proc server or a local server using the same set of files and two project files. Using two project files allows dependencies to exist on both the DLL and the EXE.</p></div><h1 class="heading">COM/ATL Features</h1><div id="sectionSection2" class="seeAlsoNoToggleSection"><p>This sample is a COM system that consists of several COM servers and an MFC application that uses the servers. The sample exhibits the intermodule communication via the connection point mechanism and demonstrates local and in-proc servers. </p></div><h1 class="heading">Other Demonstrated Features</h1><div id="sectionSection3" class="seeAlsoNoToggleSection"><ul><li><p>The ATL servers use the Standard Template Library for collections.</p></li><li><p>The MFC driver uses MFC template classes.</p></li><li><p>The MFC driver, an example of a non-document/view application, uses a class derived from <b>CFrameWnd</b> as the output window for the drawing the Tangram pieces.</p></li></ul></div><h1 class="heading">Attributes</h1><div id="sectionSection4" class="seeAlsoNoToggleSection"><p>This sample uses the following attributes:  </p><ul><li><p><b>ATLTANGRAM</b>   export, helpstring, object, pointer_default, uuid</p></li><li><p><b>ATLTANGRAM/atlgdiworld</b>   coclass, com_interface_entry, default, dll, event_receiver, helpstring, iid_is, implements_category, in, module, name, object, out, pointer_default, progid, registration_script, size_is, unique, uuid, version, vi_progid</p></li><li><p><b>ATLTANGRAM/atlglworld</b>   coclass, com_interface_entry, default, dll, event_receiver, helpstring, implements_category, in, module, name, object, out, pointer_default, progid, registration_script, uuid, vi_progid</p></li><li><p><b>ATLTANGRAM/atlmodel</b>   coclass, default, dll, event_source, exe, helpstring, in, module, name, object, out, pointer_default, progid, size_is, uuid</p></li><li><p><b>ATLTANGRAM/atltangramcanvas</b>   coclass, default, dll, helpstring, in, module, name, object, out, pointer_default, progid, registration_script, uuid, vi_progid</p></li></ul></div><h1 class="heading">Classes and Keywords</h1><div id="sectionSection5" class="seeAlsoNoToggleSection"><p>The sample uses the following ATL classes:</p><p>CComObjectRootEx, CComCoClass, CComControl, IDispatchImpl, IProvideClassInfo2Impl, IPersistStreamInitImpl, IPersistStorageImpl, IPersistPropertyBagImpl, IPerPropertyBrowsingImpl, IQuickActivateImpl, IObjectSafetyImpl, IOleControlImpl, IOleObjectImpl, IOleInPlaceActiveObjectImpl, IViewObjectExImpl, IOleInPlaceObjectWindowlessImpl, IDataObjectImpl, ISupportErrorInfo, ISpecifyPropertyPagesImpl, IConnectionPointContainerImpl, IPropertyNotifySinkCP, CDialogImpl</p><p>The sample uses the following MFC classes:</p><p>CFrameWnd, CTypedPtrList&lt;&gt;, CDialog, CWinApp, and additional supporting classes</p><p>This sample uses the following keywords:</p><p>_ASSERTE; AddRef; AddUpdateRect; Advise; assert; ASSERT; ATLTRACE; auxSolidSphere; BEGIN_COM_MAP; BEGIN_CONNECTION_POINT_MAP; BEGIN_MESSAGE_MAP; BEGIN_OBJECT_MAP; BitBlt; CATEGORYINFO ; CComCoClass; CComModule::GetClassObject; CComModule::GetLockCount; CComModule::Init; CComModule::RegisterServer; CComModule::Term; CComModule::UnregisterServer; CComObjectRootEx; CExeModule::Init; CExeModule::RegisterClassObjects; CExeModule::RegisterServer; CExeModule::RevokeClassObjects; CExeModule::UnregisterServer; CExeModule::UpdateRegistryFromResource; CFrameWnd::AssertValid; CFrameWnd::Dump; CFrameWnd::PreCreateWindow; ChoosePixelFormat; CModelList; CoCreateInstance; CoInitializeEx; COM_INTERFACE_ENTRY; COM_INTERFACE_ENTRY_AGGREGATE; COM_INTERFACE_ENTRY_IMPL; CONNECTION_POINT_ENTRY; CopyRect; CoTaskMemFree; CProxyIATLTangramModelEvent; CreateCompatibleDC; CreatePalette; CWnd::CreateEx; DECLARE_GET_CONTROLLING_UNKNOWN; DECLARE_MESSAGE_MAP; DECLARE_ONLY_AGGREGATABLE; DECLARE_REGISTRY_RESOURCEID; DeleteObject; DescribePixelFormat; DisableThreadLibraryCalls; DispatchMessage; DoButtonDown; DoModal; END_COM_MAP; END_CONNECTION_POINT_MAP; END_MESSAGE_MAP; END_OBJECT_MAP; EqualRect; ErrorMessage; GdiFlush; GetBoundingRect; GetClientRect; GetCommandLine; GetControllingUnknown; GetDC; GetMessage; GetModuleFileName; GetObject; GetPalette; GetPaletteEntries; GetPixelFormat; GetRotation; GetVertices; glBegin; glClearColor; GLdouble CoCreateInstance; glEnable; glEnd; glFlush; glGetIntegerv; glInitNames; glLightfv; glLightModelfv; glLoadIdentity; glMatrixMode; glNormal3d; glPolygonMode; glPopMatrix; glPopName; glPushMatrix; glPushName; GLRender; glRenderMode; GLResize; glRotated; glSelectBuffer; GLSetup; glTranslated; glTranslatef; gluPerspective; gluPickMatrix; gluUnProject; glVertex2d; glVertex3d; glViewport; HPALETTE; ICatInformation::EnumClassesOfCategories; ICatRegister::QueryInterface; ICatRegister::RegisterCategories; ICatRegister::RegisterClassImplCategories; ICatRegister::UnRegisterCategories; ICatRegister::UnRegisterClassImplCategories; IConnectionPointContainer::FindConnectionPoint; IConnectionPointContainer::Release; IConnectionPointContainerImpl; InitInstance; InvalidateRect; IsCurrent; IsValidAddress; IUnknown::Release; LoadIcon; LoadStandardCursor; LocalFree; MakeCurrent; OBJECT_ENTRY; ON_COMMAND; ON_WM_DESTROY ; OnCancel; OnDestroy; OnInitDialog; OnOK; OnQueryNewPalette; OutputDebugString; OutputGlError; Polygon; PreCreateWindow; PtInRegion; QueryInterface; RealizePalette; Release; ReleaseConnectionPoint; ReleaseDC; Rotate; SelectObject; SelectPalette; SetPixelFormat; SetRectEmpty; specifyMaterial; StringFromCLSID; SubkeyExists; va_end; wcscpy; wglCreateContext; wglGetCurrentContext; wglMakeCurrent</p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Note </th></tr><tr><td><p>Some of the samples, such as this one, have not been modified to reflect the changes in the Visual C++ wizards, libraries, and compiler, but still demonstrate how to complete your desired task. </p></td></tr></table></div></div></div><div id="footer"><div class="footerLine"></div>
          © Microsoft Corporation. All rights reserved.  Send <a href="mailto:DevDocs@microsoft.com?subject=Documentation Feedback :ATLTangram Attributes Sample: Demonstrates Managing Large Projects That Use ATL, MFC, and COM">comments</a> about this topic to Microsoft.
      </div></div></body></html>
