<!--TO READ THIS HELP FILE, RIGHT-CLICK ON THE FILE NAME IN THE
    SOLUTION EXPLORER PANE AND SELECT "VIEW IN BROWSER"-->

<html><head><title>Marquee Sample: Provides Performance Monitoring Data Through Scripting</title></head><body><h1>Marquee Sample: Provides Performance Monitoring Data Through Scripting</h1><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p /><p>The Marquee sample shows how to use performance monitor objects through scripting. </p><div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left">Security Note </th></tr><tr><td><p>This sample code is provided to illustrate a concept and should not be used in applications or Web sites, as it may not illustrate the safest coding practices.</p></td></tr></table></div><h1 class="heading">Building and Running the Sample</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"><h4 class="subHeading">To build and run this sample</h4><div class="subSection"><ol><li><p>Open the solution file Marquee.sln.</p></li><li><p>From the <b>Build</b> menu, click <b>Build Solution</b>. </p><p>This will build and register the PerfDisp project and will build the Canvas project. </p></li><li><p>From the <b>Debug</b> menu, click <b>Start Without Debugging</b>.  </p><p>This will run Canvas.exe, which will display a window with a scrolling marquee. </p></li></ol></div></div><h1 class="heading">How the Sample Works</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"><p>The project PerfMonDisp is a DLL that wraps the functionality of <b>CPerfMon</b> and exposes it through an automation interface. These interfaces are defined using attributes. See PerfDisp\PerfMonDisp.h for this code.</p><p>PerfMonDisp.dll also handles the DLL entry points that the performance monitoring system requires to collect performance monitoring data.</p><p>Canvas is a dialog-based MFC project that hosts JScript and PerfMonDisp. It does the following:  </p><ul><li><p>Loads JScript and parses script.js.</p></li><li><p>Exposes a drawing area to the script by giving the script an <b>IDispatch</b> interface implemented by the dialog box.</p></li><li><p>Gives the script an instance of PerfMonDisp.</p></li><li><p>Calls methods implemented in the loaded script to update the drawing area.</p></li></ul><p>The management of the scripting engine is done by the code in Canvas\Script.h.</p><p>Canvas\CanvasDlg.cpp calls the script management code in Canvas\Script.h.</p></div><h1 class="heading">Classes</h1><div id="sectionSection2" class="seeAlsoNoToggleSection"><p>This sample demonstrates the following classes: </p><p>CPerfMon, IActiveScript, IActiveScriptSite</p></div></div><div id="footer"><div class="footerLine"></div>
          © Microsoft Corporation. All rights reserved.  Send <a href="mailto:DevDocs@microsoft.com?subject=Documentation Feedback :Marquee Sample: Provides Performance Monitoring Data Through Scripting">comments</a> about this topic to Microsoft.
      </div></div></body></html>
